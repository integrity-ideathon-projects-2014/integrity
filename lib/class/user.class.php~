<?php

/* User table SQL */
    
/**
 * User table SQL (query, insert, update, delete) 
 *
 * PHP version 5
 *
 * LICENSE: This source file is subject to the ... License, available
 * at http://
 *
 * @author      Deepak Adhikari <deeps.adhi@gmail.com>
 * @copyright   2013
 * @license     http://
 * @version     1.0.0
 */

/**
 * Load database configuration file
 */
require_once(LIB_PATH.DS.'class'.DS.'database.class.php');

class User extends Database 
{
    /**
     * User table name
     * @var string Name of user table
     */
    private $table = 'user';

    /**
     * ID field
     * @var string ID of user
     */
     private $id;

    /**
     * Username field
     * @var string Username of user
     */
     private $username;

    /**
     * Password field
     * @var string Password of user
     */
     private $password;

    /**
     * Email field
     * @var string Email of user
     */
     private $email;


    /**
     * Connects to database
     */
    public function __construct(){
        /**
         * Call parent constructor
         */
        parent::__construct();
   }

    /**
     * Insert into table
     *
     * @param   array   $params User details
     * @return  bool            Row updated or not
     */
    public function add(array $params){
        $params = $this->addDataTypeToParamsKeys($params);
        $this->initData();
        $this->params = $params;
        $this->extractKeys();
        $this->sql = 'INSERT INTO '.
                    '`' .$this->table. '` '.  '(`'. implode('`, `', $this->keys) . '`) '.
                'VALUES '.
                    '(:' . implode(', :', $this->keys) . ')';
        $res = $this->query();
        $this->data['lastInsertId'] = $this->db->lastInsertId();
        $this->db->commit();
        $this->stmt->closeCursor();
        return $res; 
    }

    /**
     * Add data type to parameters keys
     *
     * @param    array $params Fields to be inserted with value
     * @return   array Fields to be inserted with value and key value prefixed with str datatype 
     */
    private function addDataTypeToParamsKeys($params){
        foreach($params as $key => $value){
            $params['str '.$key] = $value;
            unset($params[$key]);
        }
        return $params;
    }

    /**
     * Perform a SQL query
     *
     * @param   string   $sql   A SQL statement
     * @return  bool            SQL statement sucessfully executed or not
     */
    public function sql($sql){
        $this->initData();
        $this->sql = $sql;
        $this->data['lastQuery'] = $sql;
        try {
            $this->stmt = $this->db->prepare($this->sql);
            $this->db->beginTransaction();
            $this->stmt->execute();
            $this->data['results'] = $this->stmt->fetchAll(PDO::FETCH_ASSOC);
            $this->data['numResults'] = count($this->data['results']);
            if($this->data['numResults'] > 0){
                $this->data['keys'] = array_keys($this->data['results'][0]);
            }
            $this->db->commit();
            $this->stmt->closeCursor();
            return true;
        } catch(Exception $e){
            $this->db->rollBack();
            $this->data['lastError'] = $e->getMessage();
            Error_Report\logger(__CLASS__, 'fatal', $e->getMessage(), 'Could not complete your request :(');
            return false;
        }
    }

    /**
     * Update table row
     *
     * @param   array   $params Fields to be changed with value
     * @param   string  $where  Update condition
     * @return  bool            Row updated or not
     */
    public function update($params, $where=''){
        $this->initData();
        $this->params = $params;
        $this->extractKeys();
        $this->sql = 'UPDATE `'.$this->table.'` SET ';
        foreach($this->keys as $key){
            $this->sql .= '`'.$key.'`=:'.$key.', ';
        }
        $this->sql = rtrim($this->sql, ', ');

        if(!empty($where)){
            $this->sql .= ' WHERE '.$where;
        }
        
        $this->query();
        $this->data['affectedRows'] = $this->stmt->rowCount();
        $this->db->commit();
        $this->stmt->closeCursor();
        return $this->data['affectedRows'] != 0 ? true : false;
    }

    /**
     * Delete from table
     *
     * @param   int   $int    Id of row
     * @return  bool          Row deleted or not
     */
    public function delete($id){
        $this->initData();
        $this->sql = 'DELETE FROM `'. $this->table .'` WHERE `id`=:id LIMIT 1';
        $this->data['lastQuery'] = $this->sql;
        try {
            $this->stmt = $this->db->prepare($this->sql);
            $this->db->beginTransaction();
            $this->stmt->bindParam(":id", $id, PDO::PARAM_INT);
            $this->stmt->execute();
            $this->data['affectedRows'] = $this->stmt->rowCount();
            $this->db->commit();
            $this->stmt->closeCursor();
            return $this->data['affectedRows'] != 0 ? true : false;
        } catch(Exception $e){
            $this->db->rollBack();
            $this->data['lastError'] = $e->getMessage();
            Error_Report\logger(__CLASS__, 'fatal', $e->getMessage(), 'Could not complete your request :(');
            return false;
        }
    }

    /**
     * Database get methods
     *
     * @param   string      $name   Name of variable
     * @return  string|int          Database query resullt
     */
    public function __get($name){
        if (array_key_exists($name, $this->data)) {
            return $this->data[$name];
        }

        $trace = debug_backtrace();
        trigger_error(
            'Undefined property via __get(): ' . $name .
            ' in ' . $trace[0]['file'] .
            ' on line ' . $trace[0]['line'],
            E_USER_NOTICE);
        return null;
    }
}

}
